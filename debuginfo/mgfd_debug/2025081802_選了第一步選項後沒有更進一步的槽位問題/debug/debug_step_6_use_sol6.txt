修復計劃（維持最低複雜度、不加大架構）
核心目標
讓使用者回答一次選項後，系統正確更新槽位、遞增步驟、進入下一題。
統一輸入方式，避免「A/B/C」與「自由文字」雙軌造成混亂。
移除「其他（請簡要說明）」這類不具體的選項。
最小改動清單（後端僅小幅接線＋微調）
對話流程銜接（關鍵修復）
在 libs/mgfd_cursor/mgfd_system.py 的 process_message/_handle_slot_collection 前，新增一個簡單判斷：
若 state['awaiting_prompt_response'] == True，則：
1) 讀取 current_prompt_step 與 current_slots
2) 呼叫 QuestionManager.process_prompt_response(step, user_message, current_slots) 進行「回覆→槽位」轉換
3) 如有新增槽位：更新 filled_slots、current_prompt_step += 1、awaiting_prompt_response = False
4) 若已滿足「足夠搜尋」則直接進入搜尋；否則呼叫 get_prompt_style_question(next_step) 發問下一題
如無新增槽位：保持 awaiting_prompt_response = True，回覆「請用 A/B/C... 格式或回覆完整選項文字」並重送同題（但這是防呆，不是預設路徑）
選項映射（最小支援 A/B/C）
在 libs/mgfd_cursor/question_manager.py 的 process_prompt_response 中，加入步驟感知的選項映射：
step=1（用途）允許輸入「A/B/C/D/E/F」或完整文字，轉換為標準值（例如 A→document_processing，E→business）
只針對當前步驟有效，不做全域解析（避免複雜化）
移除不具體選項
在 QuestionManager.get_prompt_style_question(step) 回傳 options 時，移除「G) 其他（請簡要說明）」；僅保留可映射到標準槽位的卡片。
回傳鍵統一性（避免 API 驗證問題）
確認所有回傳皆使用 filled_slots，並包含 dialogue_stage（你已補齊，保持一致即可）。
不改的部分（刻意避免增加複雜度）
不改前端：仍用純文字對話；短期不引入卡片 UI（圖卡風格可留待後續版）。
不改 EnhancedSlotExtractor 的主流程：只在「等待回覆模式」走 QuestionManager.process_prompt_response 的路徑；一般非等待回覆時才走擷取器（避免雙重解析衝突）。
不引入新狀態機/新模組：僅在現有模組補「回覆→槽位」接線與步驟前進。
期待行為（以你的案例驗證）
輸入1：「請介紹目前適合文書處理的筆電」
系統：問「用途」選項（A-F）
狀態：awaiting_prompt_response=True, current_prompt_step=1
輸入2：「E」或「商務辦公」
系統：process_prompt_response(1, "E", slots) → 轉換 usage_purpose=business
狀態：filled_slots 更新、awaiting_prompt_response=False、current_prompt_step=2
系統：發第2題（預算）
不會再重覆問第1題。
驗收手順（最小）
兩輪 API 測試（同一 session_id）
檢查 filled_slots 是否更新
current_prompt_step 是否 1→2
awaiting_prompt_response 是否 False
一輪「字母」＋一輪「完整選項文字」都應通過。
風險與緩解
風險：使用者輸入非預期格式（如小寫/空白）
緩解：process_prompt_response 先做 strip().lower()，並允許字母/全名兩種。
風險：已收集足夠槽位卻仍繼續提問
緩解：在提問前檢查 should_skip_to_search(slots)。
變更範圍（精準）
libs/mgfd_cursor/mgfd_system.py：新增「等待回覆模式」處理分支、步驟遞增與旗標更新
libs/mgfd_cursor/question_manager.py：process_prompt_response 新增步驟對應的 A-F 映射；get_prompt_style_question 移除「其他」
無其它檔案變更
這樣做能以最小代價解決「選了選項仍重覆同題」與「輸入方式混亂」兩個關鍵問題，且不引入新模組或前端大改。
[enter innovate]

目標
立即消除「選了選項仍重覆同題」且不增系統複雜度。
統一輸入規則，避免 A/B/C 與自由文字雙軌混亂。
移除「其他（請簡要說明）」這類不具體分支。
可行方案（多路徑，權衡）
方案A（最小改動，後端接線優先）
在等待回覆時，優先走 QuestionManager.process_prompt_response(step, user_message, slots) 映射回標準槽位，再遞增 current_prompt_step（非等待時才用 EnhancedSlotExtractor）。
移除 step=1 的「其他」選項。
優點：不改前端、不引新模組；一次解決「重覆問第一題」與輸入混亂。
風險：需釐清 A/B/C 與中文全稱對應表，但僅針對當前步驟，複雜度很低。
方案B（卡片UI，體驗最佳）
後端回傳標準化卡片結構，前端點擊回傳 選擇選項: <value>。
優點：避免文字歧義；可擴展多選。
風險：需前端改版；非當下最小修復。
方案C（純語法規範化）
統一要求輸入 選擇選項: <value>；後端只接受這種格式。
優點：極簡，但對使用者不友善；可作備援提示。
建議路線
立即上 方案A（最小改動且效果直接）。
後續迭代再上 方案B（卡片UI），行為與 方案A 完全相容。
最小變更清單（不加大複雜度）
後端流控（libs/mgfd_cursor/mgfd_system.py）
在 process_message 或 _handle_slot_collection 前段加一個「等待回覆模式」分支：
若 awaiting_prompt_response=True：
取 current_prompt_step、current_slots
執行 QuestionManager.process_prompt_response(step, user_message, current_slots)
若有新增槽位：更新 filled_slots、current_prompt_step += 1、awaiting_prompt_response=False
若 should_skip_to_search(slots) 為真→直接搜尋；否則出下一題
選項映射（libs/mgfd_cursor/question_manager.py）
在 process_prompt_response 裡，針對當前步驟支援：
字母鍵（A-F）與中文全稱雙軌映射到標準值（如 E→business）
get_prompt_style_question(step) 移除「其他（請簡要說明）」並只返回可映射之選項
一致性
回傳欄位用 filled_slots，包含 dialogue_stage（你已修，維持）。
紀錄與監控（極簡）
只打兩類關鍵日誌：
等待回覆模式命中（輸入→映射→新增槽位、步驟變化）
跳過到搜尋的條件命中
若映射失敗：一次性提示「請用 A-F 或完整選項文字」，不重覆刷整段文案。
測試驗收（兩輪即可）
用同一 session_id：
輸入1：「請介紹目前適合文書處理的筆電」→ 回 Q1（用途）
輸入2：「E」或「商務辦公」→ filled_slots.usage_purpose=business、current_prompt_step: 1→2、回 Q2（預算）
另測「選擇選項: business」確認也能通過。
風險與回滾
若映射規則誤判，最多只影響單輪；回滾即移除「等待回覆模式」分支即可。
enter innovate 
採用方案A，之後需要做哪些修改，讓系統穩定而完整

必要修改（方案A，最小變更且穩定）
後端流程銜接（關鍵）
在 mgfd_system.py 進入槽位流程前，增加「等待回覆模式」分支：
若 state['awaiting_prompt_response'] == True：
讀取 current_prompt_step、filled_slots
呼叫 QuestionManager.process_prompt_response(step, user_message, filled_slots)
若有新增槽位：
寫回 filled_slots
current_prompt_step += 1
awaiting_prompt_response = False
若 should_skip_to_search(filled_slots) 為真 → 直接呼叫搜尋；否則 get_prompt_style_question(next_step) 出下一題
若無新增槽位：返回簡短提示（請用 A–F 或完整選項文字），並保留同題一次
目的：把「使用者回覆 → 槽位更新 → 步驟前進」這段接線補起來，終止重覆同題
選項映射（僅針對當前步驟，避免複雜度）
在 question_manager.py 的 process_prompt_response：
支援字母鍵 A–F 與中文全稱雙軌映射 → 標準值（使用 slot_mapping.py）
step=1（用途）：A–F 對應 document_processing/entertainment/creative/gaming/business/programming
step=2（預算）：A–E 對應 budget/low_mid/mid_range/high_mid/premium（依現有定義）
其餘步驟同理（僅針對當前步驟）
做好 strip().lower() 正規化；允許中文全稱/英文標準值/字母
在 get_prompt_style_question(step)：
移除「其他/請簡要說明」選項
確保回傳 options 含 {id, label, value}，其中 value 是標準槽位值；id 僅供顯示（A–F）
擷取器與等待回覆的協作
在 UserInputHandler.process_user_input 或 EnhancedSlotExtractor 前段加一個輕量守門：
若 state['awaiting_prompt_response'] == True，跳過自由文本的槽位擷取（避免覆蓋），改由 process_prompt_response 路徑處理
目的：避免「等待回覆」時又被一般擷取邏輯攔截造成混亂
回傳統一性（避免 API 驗證錯誤）
已完成：回傳統一使用 filled_slots，並包含 dialogue_stage。後續改動保持一致
日誌與錯誤處理（極簡）
命中等待回覆分支時，打關鍵日誌：step、input、new_slots、step->step+1
無法映射時只提示一次簡短用法（A–F 或完整選項文字），避免刷屏
穩定性補強（不增加架構複雜度）
允許常見同義字與大小寫/空白
在 process_prompt_response 做最小 alias 表（如「商務/辦公/Business」→ business）
跳題與搜尋條件
每次步驟前，先檢查 should_skip_to_search(filled_slots)，滿足就進搜尋，不多問
單題重試防護
同一題最多 1 次「格式提示」後仍無效就回退到簡短說明＋重送同題，避免陷入無限錯誤提示
測試與驗收（最小）
兩輪 E2E（同 session_id）
輸入1：「請介紹目前適合文書處理的筆電」→ 啟動 step=1 問題
輸入2：「E」或「商務辦公」→ filled_slots.usage_purpose=business、current_prompt_step: 1→2，收到 step=2 問題
邊界用例
輸入2：空字串或「Z」→ 提示一次用法，仍留在 step=1
輸入2：「選擇選項: business」→ 直接映射成功
風險與回滾
風險：映射表不齊 → 小範圍補 alias；不引新依賴
回滾：移除等待回覆分支即可回舊邏輯（但將恢復重覆同題問題）
此修改面積極小、可快速落地，能穩定解決「選了選項仍重覆同題」與「輸入方式混亂」，且不增加系統複雜度。
