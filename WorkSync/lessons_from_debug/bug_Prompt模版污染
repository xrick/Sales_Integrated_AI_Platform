 問題診斷：系統提示模板快取污染
  發現了關鍵問題！generate_three_tier_prompt()方法有嚴重的狀態污染：每次調用時都在修改同一個self.SysPrompt模板，導致第一次查詢的結果被"硬編碼"到後續所有查詢中。
  這是典型的可變狀態共享問題。
  ─────────────────────────────────────────────────

  🐛 問題根源分析

  🔍 核心問題：系統提示模板污染

  從日誌分析發現了嚴重的模板狀態污染問題：

  1. 問題表現：
    - 第1個查詢："請介紹輕便的筆電" ✅ 正常
    - 第2個查詢："請介紹適合文書處理的筆電" ❌ 系統提示中仍顯示第1個查詢
    - 第3個查詢："請幫我找螢幕比較大的筆電" ❌ 系統提示中仍顯示第1個查詢
  2. 技術根源：
  # 在 MGFDKernel.py 中的問題代碼
  def generate_three_tier_prompt(self, product_data=None, user_query=None):
      # 🚨 問題：直接修改 self.SysPrompt，造成狀態污染
      result = self.SysPrompt.replace("{product_data}", str(product_data))
      result = result.replace("{user_query}", str(user_query))
      return result
  3. 污染機制：
    - 第一次調用後，self.SysPrompt中的{user_query}被替換為實際查詢
    - 後續調用時，由於佔位符已被替換，無法正確更新用戶查詢
    - 產品資料可以更新（因為每次都是新的JSON），但用戶查詢永遠停留在第一次

  📊 問題影響範圍

  | 查詢序號 | 實際查詢           | 系統提示中的查詢   | 產品資料 | 狀態   |
  |------|----------------|------------|------|------|
  | 1    | "請介紹輕便的筆電"     | "請介紹輕便的筆電" | ✅ 正確 | ✅ 正常 |
  | 2    | "請介紹適合文書處理的筆電" | "請介紹輕便的筆電" | ✅ 正確 | ❌ 污染 |
  | 3    | "請幫我找螢幕比較大的筆電" | "請介紹輕便的筆電" | ✅ 正確 | ❌ 污染 |

  🛠️ 解決方案規劃

╭───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│ Ready to code?                                                                                                                                                    │
│                                                                                                                                                                   │
│ Here is Claude's plan:                                                                                                                                            │
│ ╭───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮ │
│ │ 修復系統提示模板污染問題                                                                                                                                      │ │
│ │                                                                                                                                                               │ │
│ │ 問題概述                                                                                                                                                      │ │
│ │                                                                                                                                                               │ │
│ │ 發現MGFDKernel中的generate_three_tier_prompt()方法存在狀態污染，導致第一次查詢的內容被硬編碼到後續所有查詢的系統提示中。                                      │ │
│ │                                                                                                                                                               │ │
│ │ 解決方案                                                                                                                                                      │ │
│ │                                                                                                                                                               │ │
│ │ 1. 修復模板污染問題                                                                                                                                           │ │
│ │                                                                                                                                                               │ │
│ │ 檔案： libs/MGFDKernel.py                                                                                                                                     │ │
│ │ - 修改generate_three_tier_prompt()方法，使用模板副本而非直接修改類別屬性                                                                                      │ │
│ │ - 確保每次調用都使用乾淨的模板基礎                                                                                                                            │ │
│ │                                                                                                                                                               │ │
│ │ 2. 優化模板管理                                                                                                                                               │ │
│ │                                                                                                                                                               │ │
│ │ - 將self.SysPrompt改為唯讀的模板字符串                                                                                                                        │ │
│ │ - 在generate_three_tier_prompt()中創建模板副本進行替換                                                                                                        │ │
│ │ - 避免可變狀態共享導致的污染                                                                                                                                  │ │
│ │                                                                                                                                                               │ │
│ │ 3. 測試驗證                                                                                                                                                   │ │
│ │                                                                                                                                                               │ │
│ │ - 測試連續多個不同查詢，確認系統提示正確更新                                                                                                                  │ │
│ │ - 驗證每個查詢都能獲得對應的產品推薦                                                                                                                          │ │
│ │ - 確保模板修復不影響現有性能優化                                                                                                                              │ │
│ │                                                                                                                                                               │ │
│ │ 預期結果                                                                                                                                                      │ │
│ │                                                                                                                                                               │ │
│ │ - 每個新查詢都能在系統提示中正確顯示當前用戶需求                                                                                                              │ │
│ │ - LLM能根據實際查詢內容提供精準的產品推薦                                                                                                                     │ │
│ │ - 維持現有的性能優化效果（85秒響應時間）                                                                                                                      │ │
│ ╰───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯ │
│                                            